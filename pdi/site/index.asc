:source-highlighter: pygments
:toc: left
:stem:

= Processamento Digital de Imagens

Richardson Santiago <richardson-santiago@ufrn.edu.br>

Página desenvolvida durante a disciplina DCA0445 - PROCESSAMENTO DIGITAL DE IMAGENS 
como documentação para os códigos implementados.

Link para as atividades: link:https://agostinhobritojr.github.io/tutorial/pdi/[atividades]


== 2. Manipulando pixels em uma imagem

Programa de link:https://agostinhobritojr.github.io/tutorial/pdi/#_manipulando_pixels_em_uma_imagem[exemplo]

=== 2.2 Exercícios

*Exercício 1* 

A atividade propõe a construção de um programa que recepe do usuário
dois pontos P1 e P2 e verifica se os pontos fornecidos estão dentro da 
imagem. Em seguida delimita-se a região definida pelo retângulo de vértices 
opostos definidos pelos pontos P1 e P2 na qual é exibido o negativo da imagem 
efeito esse alcançado subtraindo 255 do valor de cada pixel que compõe o retângulo.

O código fonte link:../pixels/regions.cpp[regions.cpp] é mostrado abaixo:
----
include::../pixels/regions.cpp[]
----

Para compilar e executar o programa link:../pixels/regions.cpp[regions.cpp], salve-o juntamente com o arquivo 
link:../Makefile[Makefile] em um diretório e execute a seguinte seqüência de comandos:

[source, shell]
----
$ make regions
$ ./regions <caminho_para_imagem>
----

Abaixo encontram-se as imagens de entrada e saída respectivamente.


image::../imgs/starry_night_gray.jpg[Entrada do programa, title="Entrada do programa", role="left"] 
image::../imgs/starry_night_gray_inverted.jpg[Saída do programa, title="Saída do programa", role="center"]

//-

*Exercício 2*

A atividade propõe a construção de um programa que dado uma imagem será
contruida uma nova imagem com os quadrantes trocados. Para tal a implementação
aqui proposta foi como segue: 

* Obten-se os quadrantes da imagem defindo o tamanho da _grid_ como metade da 
altura e largura da imagem e utilizando o construtor da classe _Rect_ seleciona-se 
quadrante e com o contrutor da classe _Mat_ copia cada quadrante para uma posição de 
um array de imagens.

[source,cpp]
----
vector<Mat> getQuarters(Mat img) {

    int GRID_WIDTH = img.cols / 2;
    int GRID_HEIGHT = img.rows / 2;

    vector<Mat> quarters = {
        img(Rect(0, 0, GRID_WIDTH, GRID_HEIGHT)), 
        img(Rect(0, img.cols / 2, GRID_WIDTH, GRID_HEIGHT)),
        img(Rect(img.rows / 2, 0, GRID_WIDTH, GRID_HEIGHT)),
        img(Rect(img.rows / 2, img.cols / 2, GRID_WIDTH, GRID_HEIGHT))
    }; 

    return quarters;
}
----
* Contrói-se uma nova imagem vazia com as mesmas dimensões da imagem original
e para cada quadrante dessa imagem copia-se uma posição aleatória do vetor de 
quadrantes da imagem original.

[source,cpp]
----
void buildImg(Mat &img, vector<Mat> &quarters) {

    int GRID_WIDTH = quarters[0].cols;
    int GRID_HEIGHT = quarters[0].rows;

    int id[] = {0, 1, 2, 3};

    srand(time(NULL));
    random_shuffle(begin(id), end(id));

    quarters[id[0]].copyTo(img(Rect(0, 0, GRID_WIDTH, GRID_HEIGHT)));
    quarters[id[1]].copyTo(img(Rect(0, img.cols / 2, GRID_WIDTH, GRID_HEIGHT)));
    quarters[id[2]].copyTo(img(Rect(img.rows / 2, 0, GRID_WIDTH, GRID_HEIGHT)));
    quarters[id[3]].copyTo(img(Rect(img.rows / 2, img.cols / 2, GRID_WIDTH, GRID_HEIGHT)));
}
----

Para compilar e executar o programa link:../pixels/switchRegions.cpp[switchRegions.cpp], salve-o juntamente com o arquivo 
link:../Makefile[Makefile] em um diretório e execute a seguinte sequência de comandos:

[source, shell]
----
$ make switchRegions
$ ./switchRegions <caminho_para_imagem>
----

Abaixo encontram-se as imagens de entrada e saída respectivamente.

image::../imgs/starry_night_gray.jpg[Entrada do programa, title="Entrada do programa", role="left"]
image::../imgs/starry_night_gray_scrambled.jpg[Saída do programa, title="Saída do programa", role="center"]


== 3. Preenchendo regiões

Programa de link:https://agostinhobritojr.github.io/tutorial/pdi/#_preenchendo_regi%C3%B5es[exemplo]

=== 3.2 Exercícios

*Exercício 1*

A solução aqui proposta para o problema da limitação de rótulos é rotular os objetos encontrados com 
uma cor RGB ao invés de um ton de cinza. Para tal foi criada a estrutura _label_ que contém um ponto 
que armazenará a semente do objeto e um vetor de três posição para armazenar o valor de cada canl de 
cor:

[source, cpp]
----
// Estrutura para o rótulo de um obejto
struct label {
    CvPoint p;
    Vec3b color;
};
----

O fluxo do programa fica, percorre-se cada pixel da imagem em busca de um pixel com valor 255 que quando
encontrado será usado o algoritmo do floodFill utilizando esse pixel como semente para que todos os pixel 
do objeto sejam encontrados, pixels esses que receberam um rótulo RGB de acordo com a quantidade de objetos 
que já foram encontrados na imagem.

Para compilar e executar o programa link:../regioes/labeling2.cpp[labeling2.cpp], salve-o juntamente com o arquivo 
link:../Makefile[Makefile] em um diretório e execute a seguinte sequência de comandos:

[source, shell]
----
$ make labeling2
$ ./labeling2 <caminho_para_imagem>
----

Abaixo encontram-se as imagens de entrada e saída respectivamente.

image::../imgs/bolhas.png[Entrada do programa, title="Entrada do programa", role="left"]
image::../imgs/lablled_img_rgb.png[Saída do programa, title="Saída do programa", role="center"]

*Exercício 2*

Algoritmo para contar as bolhas que possuem buracos e as que não possuem buracos, eliminando as que tocam as bordas.

A exclusão dos objetos que tocam as bordas da imagem foi feita percorrendo a primeira e ultima linha e coluna buscando
por pixels com valor 255 que quando encontrado foram utilizando como semente para o algoritmo floodFill para assim preencher 
todos os pixels do objeto como o mesmo tom do fundo:

[source, cpp]
----
void removeBorderObj(Mat &img) {
    int width = img.size().width, height = img.size().height;

    label l;
    l.color = Vec3b(0, 0, 0);

    for(int i = 0; i < height; i++) {
        // Verific a primeira coluna
        if(img.at<Vec3b>(i, 0) == Vec3b(255, 255, 255)){
            l.p.x = 0;
            l.p.y = i;

            floodFill(img, l.p, l.color);            
        }
        
        // Verifica a ultima coluna
        if(img.at<Vec3b>(i, img.cols - 1) == Vec3b(255, 255, 255)){
            l.p.x = img.cols - 1;
            l.p.y = i;

            floodFill(img, l.p, l.color);  
        }
    }

    for(int j = 0; j < width; j++) {
        // Verific a primeira linha
        if(img.at<Vec3b>(0, j) == Vec3b(255, 255, 255)){
            l.p.x = j;
            l.p.y = 0;

            floodFill(img, l.p, l.color);            
        }
        
        // Verifica a ultima linha
        if(img.at<Vec3b>(img.rows - 1, j) == Vec3b(255, 255, 255)){
            l.p.x = j;
            l.p.y = img.rows - 1;

            floodFill(img, l.p, l.color);  
        }
    }
}
----

Em seguinda utilizando o algoritmo floodFill rotula-se todos os objetos que restaram na imagem:

[source, cpp]
----
int labelImg(Mat &img) {
    int width = img.size().width, 
    height = img.size().height,
    nObj = 0;
    
    label l;
    for(int i = 0; i < height; i++) {
        for(int j = 0; j < width; j++) {
            if(img.at<Vec3b>(i, j) == Vec3b(255, 255, 255)){
                // Semete de um objeto foi encontrada
                nObj++;
                // Salva a cordenada da semente
                l.p.x = j;
                l.p.y = i;
                //Controi uma cor BGR com base no numero do objeto
                l.color = Vec3b(
                    nObj%255, 
                    (nObj/255)%255, 
                    nObj/(255*255)
                );
                floodFill(img, l.p, Scalar(l.color));
            }
        }
    }

    return nObj;
}
----

Nesse ponto o programa tem conhecimento da quantidade total de objetos na cena, porém não
está quantificado quantos possuem buracos, para realizar esse tarefa primeiro é necessario 
a cor do funda da imagem para que os buracos existentes se diferenciem do fundo, para tal
executa-se o floodFill apartir do primeiro pixel da imagem:

[source, cpp]
----
void changeBg(Mat &img) {
    label l;
    
    // Pixel para o inicio do floodfill
    l.p = CvPoint(0, 0);

    // Novo Bg
    l.color = Vec3b(255, 255, 255);

    // Floodfill the Bg
    floodFill(img, l.p, l.color);
}
----

Por fim percorre-se a imagem em busca de pixels com valor do fundo anterior, realiza-se o floodFill
para preencher completamente o buraco com o valor do novo fundo, conta-se quantos buracos foram encontrados
e subtraisse do valor total de objetos encontrados:

[source, cpp]
----
int countHoles(Mat &img) {
    int width = img.size().width, 
    height = img.size().height,
    nObj = 0;

    label l;
    l.color = Vec3b(255, 255, 255);

    for(int i = 0; i < height; i++) {
        for(int j = 0; j < width; j++) {
            if(img.at<Vec3b>(i, j) == Vec3b(0, 0, 0)){
                // Semete de um objeto foi encontrada
                nObj++;
                // Salva a cordenada da semente
                l.p = CvPoint(j, i); 
                
                floodFill(img, l.p, l.color);
            }
        }
    }

    return nObj;
}
----

Para compilar e executar o programa link:../regioes/objCounter.cpp[objCounter.cpp], salve-o juntamente com o arquivo 
link:../Makefile[Makefile] em um diretório e execute a seguinte sequência de comandos:

[source, shell]
----
$ make objCounter
$ ./objCounter <caminho_para_imagem>
----

Abaixo encontram-se a saída do terminal e as imagens de entrada e saída respectivamente.

[source, shell]
----
$ ./objCounter <caminho_para_imagem>

Objetos sem buraco(s): 14

Objetos com buraco(s): 7

----

image::../imgs/bolhas.png[Entrada do programa, title="Entrada do programa", role="left"]
image::../imgs/fully_labelled_image_.png[Saída do programa, title="Saída do programa", role="center"]


== 4. Manipulação de histogramas

Programa de link:https://agostinhobritojr.github.io/tutorial/pdi/#_manipula%C3%A7%C3%A3o_de_histogramas[exemplo]

=== 4.2 Exercícios

*Exercício 1*

Algoritmo que tem como objetivo equalizar a imagem capturada. Primeiramente é realizada a transforma da 
imagem capturada para tons de cinza em sequida aplica-se a função _equalizeHist_ a imagem para realizar 
a equalização do histograma.

O código fonte link:../histogramas/equalize.cpp[equalize.cpp] é mostrado abaixo:
----
include::../histogramas/equalize.cpp[]
----

Para compilar e executar o programa link:../histogramas/equalize.cpp[equalize.cpp], salve-o juntamente com o arquivo 
link:../Makefile[Makefile] em um diretório e execute a seguinte sequência de comandos:

[source, shell]
----
$ make equalize
$ ./equalize
----

*Exercício 2*

A atividade propõe a criação de um detector de movimento dado os frames de um vídeo. Sendo assim cada frame campturado 
é transformado para escala de cinza para que em seguida seja calculado o histograma o mesmo é normalizado e comparado 
com o histograma do próximo frame utilizando a função _compareHist_ sendo o resultado maior que o _threshold_ pré estabelescido
será exibida uma mensagem alertando que houve movimento no vídeo.                  

Para compilar e executar o programa link:../histogramas/motiondetector.cpp[motiondetector.cpp], salve-o juntamente com o arquivo 
link:../Makefile[Makefile] em um diretório e execute a seguinte sequência de comandos:

[source, shell]
----
$ make motiondetector
$ ./motiondetector

    ***Atenção***
    Movimento Detectado
----

== 5. Filtragem no domínio espacial I

Programa de link:https://agostinhobritojr.github.io/tutorial/pdi/#_filtragem_no_dom%C3%ADnio_espacial_i[exemplo]

=== 5.2 Exercícios

*Exercício 1*

O exercício propõe a adição de mais uma funcionalidade ao exemplo acima citato. Funcionalidade essa que consiste na aplicação do 
filtro laplaciano após a aplicação do filtro gaussiano.

O resultado foi alcançado adicionando-se uma _flag_ ao exemplo que define se uma filtragem a mais deve ser adicionada para cada frame 
processado aplicando assim um novo filtro a cada frame.

[source, cpp]
----
bool lapl = false;

if(lapl) {
    mask = Mat(3, 3, CV_32F, laplacian);
    filter2D(frameFiltered, frameFiltered, frame32f.depth(), mask, Point(1,1), 0);
}
----

Para compilar e executar o programa link:../filtragem_espacial/filtroespacial.cpp[filtroespacial.cpp], salve-o juntamente com o arquivo 
link:../Makefile[Makefile] em um diretório e execute a seguinte sequência de comandos:

[source, shell]
----
$ make filtroespacial
$ ./filtroespacial
----

image::../imgs/filtragem_espacial_original.png[Entrada do programa, title="Entrada do programa", role="left"]
image::../imgs/filtragem_espacial_result.png[Saída do programa, title="Saída do programa", role="center"]

== 6. Filtragem no domínio espacial II

Programa de link:https://agostinhobritojr.github.io/tutorial/pdi/#_filtragem_no_dom%C3%ADnio_espacial_ii[exemplo]

=== 6.1 Exercícios

*Exercício 1*

A ativadade propõe a criação de uma interface que proporcione ao usuário aplicar o efeito Tilf shift em imgaens,
para tal criada duas imagens a partir da imagem de entrada, uma usada apenas para a multiplicação ponderada e 
outra usada para armazenar o borramento da imagem de entrada. Ao final é feita a a multiplicação ponderada dos 
pixels seguindo o controle de desfoque feito manualmente a partir de sliders presentes na interface.

Para compilar e executar o programa link:../filtragem_espacial/tiltshift.cpp[tiltshift.cpp], salve-o juntamente com o arquivo 
link:../Makefile[Makefile] em um diretório e execute a seguinte sequência de comandos:

[source, shell]
----
$ make tiltshift
$ ./tiltshift <caminho_para_imagem>
----

image::../imgs/tilt_shift_interface.png[Interface, title="Interface", width=500, height=500]
image::../imgs/crossing.png[Entrada do programa, title="Entrada do programa", role="left", width=500, height=500]
image::../imgs/tilt_shift_result.png[Saída do programa, title="Saída do programa", role="center", width=500, height=500]

== 7. Filtragem no domínio da frequência

Programa de link:https://agostinhobritojr.github.io/tutorial/pdi/#_filtragem_no_dom%C3%ADnio_da_frequ%C3%AAncia[exemplo]

=== 7.1 Exercícios

O exercíco propõe a criação de um programa que auxilie no melhoramento de imagens com iluminação irregular utilizando o 
filtro homomórfico, para tal foi criada uma interface com _sliders_ para ajustar os paramentros do filtro e são mostradas 
em janelas diferentes a imagem com a aplicação do filtro, a imagem original e o filtro que está sendo aplicado.

Para compilar e executar o programa link:../filtragem_frequencia/homomorfico.cpp[homomorfico.cpp], salve-o juntamente com o arquivo 
link:../Makefile[Makefile] em um diretório e execute a seguinte sequência de comandos:

[source, shell]
----
$ make homomorfico
$ ./homomorfico <caminho_para_imagem>
----

image::../imgs/interface_homorfico.png[Interface, title="Interface", width=1200, height=330]
image::../imgs/shining_gray.jpg[Entrada do programa, title="Entrada do programa", role="left", width=256, height=256]
image::../imgs/shining_filtered.jpg[Saída do programa, title="Saída do programa", role="center", width=256, height=256]

== 8 Detecção de bordas com o algoritmo de Canny

Programa de link:https://agostinhobritojr.github.io/tutorial/pdi/#_canny_e_a_arte_com_pontilhismo[exemplo]

=== 8.1 Canny e a arte com pontilhismo

Programa de link:https://agostinhobritojr.github.io/tutorial/pdi/#_canny_e_a_arte_com_pontilhismo[exemplo]

=== 8.2 Exercícios

O exercício solicita a implementação de um programa para usar as bordas produzidas pelo algoritmo de Canny para 
melhorar a qualidade da imagem pontilhista gerada, para tal utiliza-se a posição dos pixels de borda encontrados pelo 
algoritmo de Canny para desenhar pontos nos respectivos locais na imagem gerada através da seguinte função:

[source, cpp]
----
void getPointillisticImage() {
    // Cria variaveis para as dimensoes da imagem
    int height = image.size().height, width = image.size().width;

    // Cria as matrizes para as bordas da imagem e para a imagem de pontos 
    points = Mat(height, width, CV_8UC3, Scalar(255, 255, 255));

    Canny(image, edges, canny_slider, 3 * canny_slider);

    // Percorre a matriz com as bordas e preenche um vetor com as coordenadas
    // dos pixels de valor 255
    vector<vector<int>> edgesCoordinates;

    for(int i = 0; i < height; i++) {
        for(int j = 0; j < width; j++) {
            if(edges.at<uchar>(i, j) == 255) {
                edgesCoordinates.push_back({i, j});
            }
        }
    }

    // Embaralha as coordenas onde os circulos serão desenhados 
    // para aumentar a autenticidade do resultado 
    random_shuffle(edgesCoordinates.begin(), edgesCoordinates.end());

    // Percorre as coordenadas e desenha em uma nova matrix os pontos 
    // com cor igual a cor da imagem na posição correspodente
    for(auto coordinate : edgesCoordinates) {
        Vec3b color = image.at<Vec3b>(coordinate[0], coordinate[1]);
        
        circle(points, Point(coordinate[1], coordinate[0]), RAIO, color, -1, CV_AA);
    }
    
}
----

A função mostrada acima tem o objetivo de sempre que o treshold do Canny for alterado na interface 
uma nova imagem pontilhista seja gerada, calculando as bordas com o algoritmo Canny em seguida 
procurando os pixels de borda e salvando suas posições em um vetor então emlhara-se esse vetor 
para melhorar a autenticidade do efeito, por fim o vetor de coordenadas é percorrido e são desenhados 
circulos em cada uma das posições preenchidos com as cores do pixel correspondente na imagem original.

Para compilar e executar o programa link:../bordas/cannyPoints.cpp[cannyPoints.cpp], salve-o juntamente com o arquivo 
link:../Makefile[Makefile] em um diretório e execute a seguinte sequência de comandos:

[source, shell]
----
$ make cannyPoints
$ ./cannyPoints <caminho_para_imagem>
----

image::../imgs/interface_canny.png[Interface, title="Interface", width=256, height=256]
image::../imgs/sunflowers.jpg[Entrada do programa, title="Entrada do programa", role="left", width=256, height=256]
image::../imgs/sunflowers_points.jpg[Saída do programa, title="Saída do programa", role="center", width=256, height=256]

== 9 Quantização vetorial com k-means

Programa de link:https://agostinhobritojr.github.io/tutorial/pdi/#_quantiza%C3%A7%C3%A3o_vetorial_com_k_means[exemplo]

=== 9.1 Exercícios 

A atividade solicita a modificação do exemplo fornecido para que a inicialização dos centróides seja feita 
utilizando o parâmetro KMEANS_RANDOM_CENTERS. Para tal a função kmeans utilizada está descrita na listagem 
a seguir.

[source, cpp]
----
kmeans(
    samples,
    nClusters,
    rotulos,
    TermCriteria(CV_TERMCRIT_ITER | CV_TERMCRIT_EPS, 100, 0.01),
    nRodadas,
    KMEANS_RANDOM_CENTERS,
    centros
);
----

Para compilar e executar o programa link:../segmentacao/kmeans_random_centers.cpp[kmeans_random_centers.cpp] 10 vezes, salve-o 
juntamente com o arquivo link:../Makefile[Makefile] em um diretório e execute a seguinte sequência de comandos:

[source, shell]
----
$ make kmeans_random_centers
$ for i in `seq 1 10`;do ./kmeans_random_centers.out <caminho_para_imagem> <numero_de_clusters>; done
----

As imagens podem diferir devido ao ponto inicial que cada centróide pode assumir e a não existência de mais rodadas 
para definir a melhor iteração da aplicação do algoritmo.